#version 330 core

// Interpolated values from the vertex shaders
in vec4 vs_vertexColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightLeftDirection_cameraspace;
in vec3 LightRightDirection_cameraspace;


// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightLeftPosition_worldspace;
uniform vec3 LightRightPosition_worldspace;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1.0,1.0,1.0);
	float LightPower = 0.0f;

	vec3 LightLeftColor = vec3(0,0.7,0.9);
	float LightLeftPower = 200.0f;
	
	vec3 LightRightColor = vec3(0.9,0.5,0.7);
	float LightRightPower = 200.0f;

	vec3 MaterialDiffuseColor = vs_vertexColor.rgb;
    vec3 MaterialAmbientColor =  MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	// Material properties
	/*vec3 MaterialDiffuseColor = vs_vertexColor.rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);
	*/
	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	float distanceLeft = length( LightLeftPosition_worldspace - Position_worldspace );
	float distanceRight = length( LightRightPosition_worldspace - Position_worldspace );


	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	vec3 lLeft = normalize( LightLeftDirection_cameraspace );
	vec3 lRight = normalize( LightRightDirection_cameraspace );

	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	float cosLeftTheta = clamp( dot( n,lLeft ), 0,1 );
	float cosRightTheta = clamp( dot( n,lRight ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	vec3 Rleft = reflect(-lLeft,n);
	vec3 Rright = reflect(-lRight,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	float cosLeftAlpha = clamp( dot( E,Rleft ), 0,1 );
	float cosRightAlpha = clamp( dot( E,Rright ), 0,1 );
	
	//color = vs_vertexColor.rgb;
	
	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		MaterialDiffuseColor * LightLeftColor * LightLeftPower * cosLeftTheta / (distanceLeft*distanceLeft) +
		MaterialDiffuseColor * LightRightColor * LightRightPower * cosRightTheta / (distanceRight*distanceRight) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance) +
		MaterialSpecularColor * LightLeftColor * LightLeftPower * pow(cosLeftAlpha,5) / (distanceLeft*distanceLeft) +
		MaterialSpecularColor * LightRightColor * LightRightPower * pow(cosRightAlpha,5) / (distanceRight*distanceRight);
	
}